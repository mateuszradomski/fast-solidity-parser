import "./abc.sol";
import "./def.sol";
import './abc.sol';
import './def.sol';
import "./abc.sol" as x;
import './abc.sol' as my_abc;
import * as y from "./abc.sol";
import * as abc from './abc.sol';
import {a as b, c as d, f} from "./abc.sol";
import { a as my_a, b as my_b } from './abc.sol';

enum Locations {
    Continent,
    Empire,
    Union,
    Country,
    State,
    City,
    Council,
    Village
}

struct KeyValuePair {
    address a0;
    bool a1;
    string a2;
    bytes a3;
    int a4;
    int8 a5;
    int16 a6;
    int24 a7;
    int32 a8;
    int40 a9;
    int48 a10;
    int56 a11;
    int64 a12;
    int72 a13;
    int80 a14;
    int88 a15;
    int96 a16;
    int104 a17;
    int112 a18;
    int120 a19;
    int128 a20;
    int136 a21;
    int144 a22;
    int152 a23;
    int160 a24;
    int168 a25;
    int176 a26;
    int184 a27;
    int192 a28;
    int200 a29;
    int208 a30;
    int216 a31;
    int224 a32;
    int232 a33;
    int240 a34;
    int248 a35;
    int256 a36;
    uint a37;
    uint8 a38;
    uint16 a39;
    uint24 a40;
    uint32 a41;
    uint40 a42;
    uint48 a43;
    uint56 a44;
    uint64 a45;
    uint72 a46;
    uint80 a47;
    uint88 a48;
    uint96 a49;
    uint104 a50;
    uint112 a51;
    uint120 a52;
    uint128 a53;
    uint136 a54;
    uint144 a55;
    uint152 a56;
    uint160 a57;
    uint168 a58;
    uint176 a59;
    uint184 a60;
    uint192 a61;
    uint200 a62;
    uint208 a63;
    uint216 a64;
    uint224 a65;
    uint232 a66;
    uint240 a67;
    uint248 a68;
    uint256 a69;
    bytes1 a70;
    bytes2 a71;
    bytes3 a72;
    bytes4 a73;
    bytes5 a74;
    bytes6 a75;
    bytes7 a76;
    bytes8 a77;
    bytes9 a78;
    bytes10 a79;
    bytes11 a80;
    bytes12 a81;
    bytes13 a82;
    bytes14 a83;
    bytes15 a84;
    bytes16 a85;
    bytes17 a86;
    bytes18 a87;
    bytes19 a88;
    bytes20 a89;
    bytes21 a90;
    bytes22 a91;
    bytes23 a92;
    bytes24 a93;
    bytes25 a94;
    bytes26 a95;
    bytes27 a96;
    bytes28 a97;
    bytes29 a98;
    bytes30 a99;
    bytes31 a100;
    bytes32 a101;
    fixed a102;
    ufixed a103;

    abc.a a102;
    abc.b a103;
    MyContract.MyStruct a104;
    MyContract.MyStruct1.MyStruct2 a105;
    mapping(address => uint) a106;
    mapping(address => mapping(address => uint)) a107;

    mapping(uint=>x) a108;
    mapping(address => bytes32) a109;
    mapping(bytes32 => test_struct) a110;
    mapping (uint64 => mapping (bytes32 => uint)) a111;
    mapping (address a => bool b) a112;
    mapping(address=>bytes32) a113;
    mapping(address=>bytes32) a114;
    mapping (Foo => uint) a115;
    mapping (address => bool) a116;
    mapping (address a => bool) a117;
    mapping (address => bool b) a118;

    uint[] a119;
    uint[][] a120;
    uint[][][] a121;
    KeyValuePair[] a122;
    Locations a123;
    mapping(uint=>x)[] a124;
}

error TopLevelCustomError();
error TopLevelCustomErrorWithArg(uint x);
error TopLevelCustomErrorArgWithoutName(string);

event e1();
event e2(uint[] a, bytes7[] indexed b, c[] x);
event e3() anonymous;
event e4(uint a, bytes32 s);
event e5(uint a, bytes32 indexed s, bool indexed b);


event AavePoolUpdated(address updated, address caller);
event AavePortalFeeUpdated(uint256 updated, address caller);
event AavePortalMintUnbacked(bytes32 indexed transferId, address indexed router, address asset, uint256 amount);
event AavePortalRepayment(bytes32 indexed transferId, address asset, uint256 amount, uint256 fee, address caller);
event AcceptAdminRole(address newAdmin);
event AccountBlacklisted(address indexed account);
event AccountWhitelisted(address indexed account);
event ActivateForceBatches();
event AddInboundProofLibraryForChain(uint16 indexed chainId, address lib);
event AddedOwner(address owner);
event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);
event AddedToWhitelist(address indexed addedAddress);
event AddressImported(bytes32 name, address destination);
event AddressSet(string indexed _name, address _newAddress, address _oldAddress);
event AddressSet(string indexed name, address newAddress, address oldAddress);
event AdminChanged(address previousAdmin, address newAdmin);
event AdminFeesSet(bytes32 indexed key, uint256 newAdminFee, address caller);
event AdminFeesWithdrawn(bytes32 indexed key, address caller);
event AdminPropertiesSet(IERC20 defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage);
event AggregateRootPropagated(bytes32 indexed aggregateRoot, bytes32 domainsHash);
event AggregateRootReceived(bytes32 indexed root);
event AggregateRootRemoved(bytes32 indexed root);
event AggregateRootSavedOptimistic(bytes32 indexed aggregateRoot, uint256 rootTimestamp);
event AggregateRootVerified(bytes32 indexed root);
event AllTokensFrozen();
event AllTokensUnfrozen();
event AllowListAddressSet(address indexed user, bool val);
event AllowListEnabledUpdated(bool isEnabled);
event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet);
event AppConfigUpdated(address indexed userApplication, uint indexed configType, bytes newConfig);
event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
event Approval(address indexed owner, address indexed spender, uint value);
event Approval(address indexed owner, address indexed spender, uint256 amount);
event Approval(address indexed owner, address indexed spender, uint256 value);
event Approval(address indexed src, address indexed guy, uint256 wad);
event ApprovalForAll(address indexed account, address indexed operator, bool approved);
event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
event Approve(address indexed token, address indexed spender, uint256 value);
event ApproveCutUpgradeNoticePeriod(address indexed addr);
event ApproveHash(bytes32 indexed approvedHash, address indexed owner);
event ArboristUpdated(address previous, address updated);
event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer);
event AssetRebalanced();
event AssetRemoved(bytes32 indexed key, address caller);
event AssignRoleAdmin(address admin);
event AssignRoleRouter(address router);
event AssignRoleWatcher(address watcher);
event AuthorizedOperator(address indexed operator, address indexed tokenHolder);
event AvatarSet(address indexed previousAvatar, address indexed newAvatar);
event BatchRefundERC1155(address indexed token, address indexed recipient, uint256[] tokenIds, uint256[] amounts);
event BatchRefundERC721(address indexed token, address indexed recipient, uint256[] tokenIds);
event BeaconUpgraded(address indexed beacon);
event BeneficiaryUpdated(address newBeneficiary);
event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment);
event BlockCommit(uint32 indexed blockNumber);
event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment);
event BlockVerification(uint32 indexed blockNumber);
event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted);
event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted);
event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch);
event BondSet(uint256 bond);
event BridgeApproval(address _token, address indexed spender, uint value);
event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data);
event BridgeOperatorsAdded(bool[] statuses, uint96[] voteWeights, address[] governors, address[] bridgeOperators);
event BridgeOperatorsRemoved(bool[] statuses, address[] bridgeOperators);
event BridgeTokens(address destinationAddress, uint256 amount);
event BridgedToken(uint64 nonce);
event Burn(address indexed account, uint256 amount);
event Burn(address indexed account, uint256 tokenId);
event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);
event CacheUpdated(bytes32 name, address destination);
event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);
event CallSalt(bytes32 indexed id, bytes32 salt);
event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);
event Canceled(bytes32 indexed ticketId);
event Cancelled(bytes32 indexed id);
event CapacitorFactorySet(address capacitorFactory);
event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake);
event ChallengeEnded(uint64 indexed challengeIndex, ChallengeTerminationType kind);
event ChangeBufferBlocks(uint64 bufferBlocks);
event ChangeExecutionDelayBlocks(uint64 executionDelayBlocks);
event ChangeMinDelay(uint256 _delayBefore, uint256 _delayAfter);
event ChangeMinOpenVoteAmount(uint256 minOpenVoteAmount);
event ChangeMinQuorum(uint64 minAcceptQuorumPct);
event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);
event ChangeSecurityCouncil(address _securityCouncilBefore, address _securityCouncilAfter);
event ChangeSupportRequired(uint64 supportRequiredPct);
event ChangedFallbackHandler(address handler);
event ChangedGuard(address guard);
event ChangedThreshold(uint256 threshold);
event ClaimTokens(address destinationAddress, uint256 amount);
event ClaimedFailedDeposit(address indexed to, address indexed l1Token, uint256 amount);
event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);
event Closed();
event CommitBatch(uint256 indexed batchIndex, bytes32 indexed batchHash);
event CommitmentUpdated(uint32 domain, bytes32 commitment);
event ConfigUpdate(UpdateType indexed updateType, bytes data);
event ConfigUpdate(uint256 indexed version, UpdateType indexed updateType, bytes data);
event ConnectorAdded(uint32 domain, address connector, uint32[] domains, address[] connectors);
event ConnectorPlugDisconnected();
event ConnectorPoolIdUpdated(address connector, uint256 poolId);
event ConnectorRemoved(uint32 domain, address connector, uint32[] domains, address[] connectors, address caller);
event ContractCallExecuted(bytes32 indexed commandId);
event ContractExpired(address indexed caller);
event ContractMapUpdated(bytes32 indexed key, address indexed previousContract, address indexed newContract);
event ContractUpdated(ContractType indexed contractType, address indexed addr);
event ConvertedToEsXai(address indexed user, uint256 amount);
event CounterEvent(uint64 count);
event CreatedConfigStore(address indexed configStoreAddress, address indexed ownerAddress);
event CreatedExpiringMultiParty(address indexed expiringMultiPartyAddress, address indexed deployerAddress);
event CreatedPerpetual(address indexed perpetualAddress, address indexed deployerAddress);
event CurrentMonthWithdrawnAmountReset(uint256);
event CurrentYearWithdrawnAmountReset(uint256);
event DAIBridged(address indexed bridgoor, uint256 amount, uint256 total);
event DAIClaimed(address indexed bridgoor, uint256 amount, uint256 total);
event DAOFunded(uint amountDAO, uint amountBurn);
event DailyWithdrawalLimitsUpdated(address[] tokens, uint256[] limits);
event DefaultAdminDelayChangeCanceled();
event DefaultAdminDelayChangeScheduled(uint48 newDelay, uint48 effectSchedule);
event DefaultAdminTransferCanceled();
event DefaultAdminTransferScheduled(address indexed newAdmin, uint48 acceptSchedule);
event DefaultGatewayUpdated(address newDefaultGateway);
event DefaultIsmSet(address indexed module);
event DefaultReceiveVersionSet(uint16 version);
event DefaultSendVersionSet(uint16 version);
event DelayBlocksUpdated(uint256 indexed updated, address caller);
event DelayBlocksUpdated(uint256 previous, uint256 updated);
event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);
event DeleteWindow(uint256 indexed windowIndex, address owner);
event Deny(address indexed usr);
event DeployDAO(address dao);
event DeployEVMScriptRegistry(address reg);
event Deposit(address indexed dst, uint256 wad);
event Deposit(address indexed sponsor, uint256 indexed collateralAmount);
event Deposit(address indexed user, uint256 indexed collateralAmount);
event Deposit(uint16 indexed tokenId, uint128 amount);
event DepositETH(address indexed from, address indexed to, uint256 amount, bytes data);
event DepositEtherPaused(bool new_status);
event DepositMessageDelivered(address indexed sender);
event DepositRequested(bytes32 receiptHash, Transfer.Receipt receipt);
event DepositSent(bytes indexed pubKey, bytes withdrawalCredential);
event DepositsDisabled(address indexed disabler);
event DepositsEnabled(address indexed enabler);
event DequeueTransaction(uint256 startIndex, uint256 count, uint256 skippedBitmap);
event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);
event DiamondCut(FacetCut[] facetCuts, address initAddress, bytes initCalldata);
event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);
event DiamondCutProposed(FacetCut[] _diamondCut, address _init, bytes _calldata, uint256 deadline);
event DiamondCutProposed(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata, uint256 deadline);
event DiamondCutRescinded(FacetCut[] _diamondCut, address _init, bytes _calldata);
event DiamondCutRescinded(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);
event DisableExecutor(uint256 indexed executorId, address indexed executorAddress);
event DisabledModule(address module);
event Dispatch(bytes32 indexed leaf, uint256 indexed index, bytes32 indexed root, bytes message);
event DispatchId(bytes32 indexed messageId);
event DisputeBlocksUpdated(uint256 previous, uint256 updated);
event DomainAdded(uint32 domain, address connector);
event DomainAdded(uint32 indexed hyperlaneDomain, uint32 circleDomain);
event DomainRemoved(uint32 domain);
event DropTransaction(uint256 index);
event EIP712DomainChanged();
event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData);
event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData);
event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData);
event ETHSubmitted(address indexed sender, address indexed recipient, uint256 sent_amount, uint256 withheld_amt);
event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData);
event EmergencyDeleteRootBundle(uint256 indexed rootBundleId);
event EmergencyERC20Recovered(address tokenAddress, uint256 tokenAmount);
event EmergencyEtherRecovered(uint256 amount);
event EmergencyExecution(address indexed to, uint256 value, bytes data);
event EmergencyPaused(address account);
event EmergencyShutdown(address indexed caller, uint256 originalExpirationTimestamp, uint256 shutdownTimestamp);
event EmergencyShutdown(address indexed caller, uint256 shutdownTimestamp);
event EmergencyStateActivated();
event EmergencyStateDeactivated();
event EmergencyUnpaused(address account);
event EnableEmergencyWithdraw(bool enabled, uint unlockTime);
event EnableExecutor(uint256 indexed executorId, address indexed executorAddress);
event EnableSupportedOutboundProof(uint16 indexed chainId, uint16 proofType);
event EnabledDepositRoute(address indexed originToken, uint256 indexed destinationChainId, bool enabled);
event EnabledModule(address module);
event EndedDepositBox(address indexed user);
event EndedSponsorPosition();
event EndedSponsorPosition(address indexed sponsor);
event EsXaiAddressSet(address indexed newEsXaiAddress);
event EthWithdrawalFinalized(address indexed to, uint256 amount);
event ExcessStateTransferFeePercChanged(address indexed tokenAddress, uint256 indexed fee);
event ExchangeRateUpdated(address exchangeRate);
event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);
event ExecuteUpgrade(Diamond.DiamondCutData diamondCut);
event ExecuteVote(uint256 indexed voteId);
event Executed(bytes32 indexed commandId);
event Executed(uint x);
event ExecutionChallengeBegun(uint64 indexed challengeIndex, uint256 blockSteps);
event ExecutionFailure(bytes32 txHash, uint256 payment);
event ExecutionFeesSet(uint256 siblingChainSlug, uint128 executionFees);
event ExecutionFromModuleFailure(address indexed module);
event ExecutionFromModuleSuccess(address indexed module);
event ExecutionManagerSet(address executionManager);
event ExecutionSuccess(bytes32 msgId);
event ExecutionSuccess(bytes32 txHash, uint256 payment);
event ExecutorAdded(address executor, address owner);
event ExecutorAuthorized(address executor);
event ExecutorRemoved(address executor, address owner);
event ExecutorSet(address executor);
event ExecutorUnauthorized(address executor);
event ExecutorUpdated(address indexed executor, bool isExecutor);
event ExodusMode();
event ExternalCalldataExecuted(bytes32 indexed transferId, bool success, bytes returnData);
event FactAuth(address indexed sender, uint32 nonce, bytes fact);
event FailedLog(string reason);
event FailedLogBytes(bytes reason);
event FailedRelayedMessage(bytes32 indexed messageHash);
event FailedRelayedMessage(bytes32 indexed msgHash);
event FailedRelayedMessage(bytes32 msgHash);
event FeeChanged(address indexed tokenAddress, uint256 indexed equilibriumFee, uint256 indexed maxFee);
event FeeEnabled(bool feeEnabled);
event FinalFeesPaid(uint256 indexed amount);
event FinalizeBatch(uint256 indexed batchIndex, bytes32 indexed batchHash, bytes32 stateRoot, bytes32 withdrawRoot);
event FinalizeDepositETH(address indexed from, address indexed to, uint256 amount, bytes data);
event FinalizeWithdrawETH(address indexed from, address indexed to, uint256 amount, bytes data);
event Finalized();
event FinalizedImplementation(address indexed implementation);
event ForceReceiveLocal(bytes32 indexed transferId);
event Freeze();
event Frozen(address indexed owner);
event FundingRateUpdated(int256 newFundingRate, uint256 indexed updateTime, uint256 reward);
event FundsWithdrawn(address indexed to, uint256 amount);
event FxChildTunnelSet(address fxChildTunnel, address newFxChildTunnel);
event FxChildUpdate(address oldFxChild, address newFxChild);
event FxRootTunnelSet(address fxRootTunnel, address newFxRootTunnel);
event GasCapUpdated(uint256 _previous, uint256 _updated);
event GasFloorUpdated(uint256 previous, uint256 updated);
event GasPriceCapUpdated(uint256 _previous, uint256 _updated);
event GatewaySet(address indexed l1Token, address indexed gateway);
event GlobalTripChanged(bool isGlobalTipped);
event GovernanceStrategyChanged(address indexed newStrategy, address indexed initiatorChange);
event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);
event GrantAccess(bytes32 indexed role, address indexed target, bytes4[] selectors);
event Handled(bytes32 blockHash);
event HashReceived(uint16 indexed srcChainId, address indexed oracle, bytes32 lookupHash, bytes32 blockData, uint confirmations);
event HasherSet(address hasher);
event HighTierThresholdsUpdated(address[] tokens, uint256[] thresholds);
event HubDomainCleared();
event HubDomainSet(uint32 domain);
event ImplementationAdded(address indexed implementation, bytes initializer, bool finalize);
event ImplementationRemoved(address indexed implementation);
event ImplementationRemoved(address indexed implementation, bytes initializer, bool finalize);
event ImplementationUpgraded(address indexed implementation, bytes initializer);
event InboxMessageDelivered(uint256 indexed messageNum, bytes data);
event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);
event InboxToggle(address indexed inbox, bool enabled);
event InflationRateCapLowered(uint256, uint256);
event InflationRecipientDewhitelisted(address);
event InflationRecipientWhitelisted(address);
event InflationRecipientsWhitelistingDisabled();
event InitializeOverload();
event Initialized(address indexed admin);
event Initialized(uint8 version);
event InitiatedNativeConfirmation(bytes32 packetId);
event InterchainGasPaymasterSet(address indexed interchainGasPaymaster);
event InterchainSecurityModuleSet(address indexed module);
event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress);
event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);
event IntrinsicParamsUpdated(uint256 txGas, uint256 txGasContractCreation, uint256 zeroGas, uint256 nonZeroGas);
event InvalidDst(uint16 indexed srcChainId, bytes srcAddress, address indexed dstAddress, uint64 nonce, bytes32 payloadHash);
event InvalidateKeyset(bytes32 indexed keysetHash);
event IsPorterAvailableStatusUpdate(bool isPorterAvailable);
event IsSequencerUpdated(address addr, bool isSequencer);
event KeysCleared();
event L2BaseFeeUpdated(uint256 oldL2BaseFee, uint256 newL2BaseFee);
event LPTokenTargetUpdated(address oldAddress, address newAddress, address caller);
event LRCClaimed(uint amount);
event LRCRewarded     (address indexed user,  uint amount);
event LRCStaked       (address indexed user,  uint amount);
event LRCWithdrawn    (address indexed user,  uint amount);
event LeafInserted(bytes32 root, uint256 count, bytes32 leaf);
event LeavesInserted(bytes32 root, uint256 count, bytes32[] leaves);
event LifetimeExtended(bytes32 indexed ticketId, uint256 newTimeout);
event LimitParamsUpdated(UpdateLimitParams[] updates);
event LiquidationCreated();
event LiquidityFeeNumeratorUpdated(uint256 liquidityFeeNumerator, address caller);
event LiquidityLayerAdapterSet(string indexed bridge, address adapter);
event ListingCapUpdate(uint16 newListingCap);
event ListingFeeTokenUpdate(ITrustedTransfarableERC20 indexed newListingFeeToken, uint256 newListingFee);
event ListingFeeUpdate(uint256 newListingFee);
event Lockdown(address indexed owner, address token, address spender);
event LockedThresholdsUpdated(address[] tokens, uint256[] thresholds);
event LogAssetConfigurationApplied(uint256 assetId, bytes32 configHash);
event LogAssetConfigurationRegistered(uint256 assetId, bytes32 configHash);
event LogAssetConfigurationRemoved(uint256 assetId, bytes32 configHash);
event LogBool(bool val);
event LogBridgeActivated();
event LogDebug(uint256 val);
event LogDepositCancel(uint256 starkKey, uint256 vaultId, uint256 assetId);
event LogForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount);
event LogFrozen();
event LogGas(string name, uint256 val);
event LogGlobalConfigurationApplied(bytes32 configHash);
event LogGlobalConfigurationRegistered(bytes32 configHash);
event LogGlobalConfigurationRemoved(bytes32 configHash);
event LogMemoryPageFactContinuous(bytes32 factHash, uint256 memoryHash, uint256 prod);
event LogMemoryPageFactRegular(bytes32 factHash, uint256 memoryHash, uint256 prod);
event LogMemoryPagesHashes(bytes32 factHash, bytes32[] pagesHashes);
event LogMessageToL1(uint256 indexed fromAddress, address indexed toAddress, uint256[] payload);
event LogNewGovernorAccepted(address acceptedGovernor);
event LogNftWithdrawalAllowed(uint256 starkKey, uint256 assetId);
event LogNominatedGovernor(address nominatedGovernor);
event LogNominationCancelled();
event LogOperatorAdded(address operator);
event LogOperatorRemoved(address operator);
event LogRegistered(address entry, string entryId);
event LogRemovalIntent(address entry, string entryId);
event LogRemoved(address entry, string entryId);
event LogRemovedGovernor(address removedGovernor);
event LogScriptCall(address indexed sender, address indexed src, address indexed dst);
event LogSetL2TokenBridge(uint256 value);
event LogSetMaxDeposit(uint256 value);
event LogSetMaxTotalBalance(uint256 value);
event LogStateTransitionFact(bytes32 stateTransitionFact);
event LogStateUpdate(uint256 globalRoot, int256 blockNumber, uint256 blockHash);
event LogSystemAssetType(uint256 assetType);
event LogTokenAdminAdded(address tokenAdmin);
event LogTokenAdminRemoved(address tokenAdmin);
event LogTokenRegistered(uint256 assetType, bytes assetInfo);
event LogUnFrozen();
event LogUserAdminAdded(address userAdmin);
event LogUserAdminRemoved(address userAdmin);
event LogUserRegistered(address ethKey, uint256 starkKey, address sender);
event LogValue(bytes32 val);
event LogWithdrawal(address indexed recipient, uint256 amount);
event MailboxSet(address indexed mailbox);
event ManagerChanged(address indexed account, address indexed newManager);
event MaxDelayBlocksUpdated(uint256 newValue);
event MaxDelaySecondsUpdated(uint256 newValue);
event MaxDelayUpdated(uint256 newMaxDelayBlocks, uint256 newMaxDelaySeconds);
event MaxGasCapUpdated(uint256 _previous, uint256 _updated);
event MaxPacketLengthSet(uint256 maxPacketLength);
event MaxRoutersPerTransferUpdated(uint256 maxRoutersPerTransfer, address caller);
event MaxSubmissionCapUpdated(uint256 _previous, uint256 _updated);
event MessageClaimed(bytes32 indexed _messageHash);
event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);
event MessageProcessed(bytes data, address caller);
event MessageProven(bytes32 indexed leaf, bytes32 indexed aggregateRoot, uint256 aggregateIndex);
event MessageRelayed(address target, bytes message);
event MessageSent(bytes data, bytes encodedData, address caller);
event MessageSent(bytes message);
event MinDelayChange(uint256 oldDuration, uint256 newDuration);
event MinDisputeBlocksUpdated(uint256 previous, uint256 updated);
event MinimumWaitTimeSet(uint256 minimumWaitTime);
event Mint(address indexed account, uint256 amount);
event Mint(address indexed account, uint256 tokenId);
event Mint(address indexed sender, uint amount0, uint amount1);
event MintLimiterTransferred(address indexed previousGovernance, address indexed newGovernance);
event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);
event MinterAdded(address minter_address);
event MinterRemoved(address minter_address);
event MirrorConnectorUpdated(address previous, address current);
event NativeBP(uint bp);
event NewAdmin(address indexed newAdmin);
event NewAdmin(address indexed oldAdmin, address indexed newAdmin);
event NewAdmin(address newAdmin);
event NewAdminFee(bytes32 indexed key, uint256 newAdminFee);
event NewAdminFee(uint256 newAdminFee);
event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);
event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);
event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties);
event NewDelay(uint indexed newDelay);
event NewDelay(uint256 delay);
event NewDepositBox(address indexed user);
event NewExecutionDelay(uint256 _newExecutionDelay);
event NewFactoryCloneToken(address indexed _cloneToken, address indexed _parentToken, uint _snapshotBlock);
event NewFeeParams(FeeParams oldFeeParams, FeeParams newFeeParams);
event NewFinalFee(FixedPoint.Unsigned newFinalFee);
event NewFixedOracleFeePerSecondPerPfc(FixedPoint.Unsigned newOracleFee);
event NewGovernor(address indexed oldGovernor, address indexed newGovernor);
event NewGovernor(address newGovernor);
event NewInflationOwner(address);
event NewLibraryVersionAdded(uint16 version);
event NewPendingAdmin(address indexed newPendingAdmin);
event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);
event NewPendingAdmin(address newPendingAdmin);
event NewPendingGovernor(address indexed oldPendingGovernor, address indexed newPendingGovernor);
event NewPriorityPeriod(uint256 priorityPeriod);
event NewPriorityTxMaxGasLimit(uint256 oldPriorityTxMaxGasLimit, uint256 newPriorityTxMaxGasLimit);
event NewProposal(uint256 indexed id, Transaction[] transactions);
event NewSponsor(address indexed sponsor);
event NewSwapFee(bytes32 indexed key, uint256 newSwapFee);
event NewSwapFee(uint256 newSwapFee);
event NewToken(address indexed token, uint16 indexed tokenId);
event NewTokenGovernance(TokenGovernance newTokenGovernance);
event NewUpgradable(uint256 indexed versionId, address indexed upgradeable);
event NewValidator(address _oldValidator, address _newValidator);
event NewWeeklyDelayFeePerSecondPerPfc(FixedPoint.Unsigned newWeeklyDelayFeePerSecondPerPfc);
event NewWithdrawFee(uint256 newWithdrawFee);
event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot);
event NodeRejected(uint256 indexed nodeNum);
event NodeRejected(uint64 indexed nodeNum);
event NoticePeriodChange(uint256 newNoticePeriod);
event Notified(bytes callData, address[] registers, bool[] statuses, bytes[] returnDatas);
event NullEvent();
event ObsoleteRollupType(uint32 indexed rollupTypeID);
event OnSequenceBatches(uint32 indexed rollupID, uint64 lastBatchSequenced);
event OneStepProofCompleted(uint64 indexed challengeIndex);
event OperationCancelled(bytes32 indexed _id);
event OperationExecuted(bytes32 indexed _id);
event OperatorshipTransferred(address[] newOperators, uint256[] newWeights, uint256 newThreshold);
event OperatorshipTransferred(address[] preOperators, uint256 prevThreshold, address[] newOperators, uint256 newThreshold);
event OperatorshipTransferred(bytes newOperatorsData);
event OptimismMintableERC20Created(address indexed localToken, address indexed remoteToken, address deployer);
event OptimisticGovernorDeployed(address indexed owner, address indexed avatar, address target);
event OptimisticModeActivated();
event OptimisticOracleChanged(address indexed newOptimisticOracleV3);
event OutboxToggle(address indexed outbox, bool enabled);
event OutputsDeleted(uint256 indexed prevNextOutputIndex, uint256 indexed newNextOutputIndex);
event Owner(uint256, address);
event OwnerChanged(address oldOwner, address newOwner);
event OwnerClaimed(address indexed claimer);
event OwnerFunctionCalled(uint256 indexed id);
event OwnerNominated(address indexed nominee);
event OwnerNominated(address newOwner);
event OwnerUpdate(address _prevOwner, address _newOwner);
event OwnerUpdated(address newOwner);
event OwnershipProposed(address indexed proposedOwner);
event OwnershipTransferStarted(address indexed newOwner);
event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);
event OwnershipTransferred(address indexed _oldOwner, address indexed _newOwner);
event OwnershipTransferred(address indexed newOwner);
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
event OwnershipTransferred(address[] preOwners, uint256 prevThreshold, address[] newOwners, uint256 newThreshold);
event Packet(bytes payload);
event PacketReceived(uint16 indexed srcChainId, bytes srcAddress, address indexed dstAddress, uint64 nonce, bytes32 payloadHash);
event PartyAdded(address indexed contractAddress, address indexed party);
event PartyRemoved(address indexed contractAddress, address indexed party);
event PathTripChanged(uint32 srcChainSlug, bool isPathTripped);
event Paused();
event Paused(address account);
event Paused(string identifier);
event PausedDeposits(bool isPaused);
event PausedFills(bool isPaused);
event PauserChanged(address indexed previousPauser, address indexed newPauser);
event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);
event PayloadStored(uint16 srcChainId, bytes srcAddress, address dstAddress, uint64 nonce, bytes payload, bytes reason);
event PendingAggregateRootDeleted(bytes32 indexed aggregateRoot);
event PositionCreated(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);
event PredicateAdded(address indexed predicate, address indexed from);
event PredicateRemoved(address indexed predicate, address indexed from);
event PreparationStart(uint256 indexed versionId);
event PriceRequestAdded(uint256 indexed roundId, bytes32 indexed identifier, uint256 time);
event PriorityControllerUpdated(address account, bool isPriorityController);
event Process(bytes32 indexed leaf, bool success, bytes returnData);
event ProcessId(bytes32 indexed messageId);
event ProofValidatorAdded(address indexed validator, address indexed from);
event ProofValidatorRemoved(address indexed validator, address indexed from);
event PropagateFailed(uint32 domain, address connector);
event ProposalApproved(bytes32 indexed proposalHash);
event ProposalCanceled(uint256 id);
event ProposalDeleted(bytes32 indexed proposalHash, bytes32 indexed assertionId);
event ProposalExecuted(bytes32 indexed proposalHash, bool[] successCalls, bytes[] returnDatas);
event ProposalExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId);
event ProposalExecuted(uint256 id, address indexed initiatorExecution);
event ProposalExecuted(uint256 indexed id, uint256 transactionIndex);
event ProposalExpired(bytes32 indexed proposalHash);
event ProposalExpiryDurationChanged(uint256 indexed duration);
event ProposalQueued(uint256 id, uint256 executionTime, address indexed initiatorQueueing);
event ProposalRejected(bytes32 indexed proposalHash);
event ProposalResolved(uint256 indexed id, bool success);
event ProposalTripped(bytes32 packetId, uint256 proposalCount);
event ProposalVoted(bytes32 indexed proposalHash, address indexed voter, Ballot.VoteType support, uint256 weight);
event ProposedRootFinalized(bytes32 aggregateRoot);
event ProposerAdded(address indexed proposer);
event ProposerModified(address proposer, bool enabled);
event ProposerRemoved(address indexed proposer);
event ProtocolFeeVaultChanged (address feeVaultAddress);
event ProxyDeposit(address sender, uint256 value);
event ProxyOssified();
event ProxyUpdated(address indexed _new, address indexed _old);
event QueryReturned(uint32 indexed originDomain, address indexed sender);
event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);
event QuorumSet(uint256 quorum);
event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);
event RampAStarted(bytes32 indexed key, uint256 futureA, uint256 futureTime, address caller);
event RampAStopped(bytes32 indexed key, address caller);
event ReadFieldElementEvent(uint256 val);
event ReadHashEvent(bytes32 val);
event ReadyToProve(uint256 indexed outputIndex, address indexed challenger);
event Receive(address indexed token, address indexed to, uint amountLD);
event ReceivedAddressResult(address result);
event ReceivedBytes32Result(bytes32 result);
event ReceivedCall(address indexed caller, uint256 amount, string message);
event ReceivedUint256Result(uint256 result);
event RecoverToVault(address indexed vault, address indexed token, uint256 amount);
event Redeem(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);
event Redeemed(bytes32 indexed userTxHash);
event RedeemedEvent(address caller, address redeemer);
event RedemptionCancelled(address indexed user, uint256 indexed index);
event RedemptionCompleted(address indexed user, uint256 indexed index);
event RedemptionStarted(address indexed user, uint256 indexed index);
event RedemptionStatusChanged(bool isActive);
event RefundAddressUpdated(address indexed previous, address indexed updated);
event RefundERC1155(address indexed token, address indexed recipient, uint256 tokenId, uint256 amount);
event RefundERC20(address indexed token, address indexed recipient, uint256 amount);
event RefundERC721(address indexed token, address indexed recipient, uint256 tokenId);
event RefundETH(address indexed recipient, uint256 amount);
event RegisterToken(address token);
event RegularFeesPaid(uint256 indexed regularFee, uint256 indexed lateFee);
event RelayedMessage(bytes32 indexed messageHash);
event RelayedMessage(bytes32 indexed msgHash);
event RelayedMessage(bytes32 msgHash);
event RelayerAdded(address relayer, address caller);
event RelayerFeeVaultUpdated(address oldVault, address newVault, address caller);
event RelayerParams(bytes adapterParams, uint16 outboundProofType);
event RelayerRemoved(address relayer, address caller);
event Rely(address indexed usr);
event RemoteAdded(uint32 domain, address remote, address caller);
event RemoteRouterEnrolled(uint32 indexed domain, bytes32 indexed router);
event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);
event RemoveLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);
event RemovedFromWhitelist(address indexed removedAddress);
event RemovedOwner(address owner);
event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);
event Repay(address indexed sponsor, uint256 indexed numTokensRepaid, uint256 indexed newTokenCount);
event RequestTransferPosition(address indexed oldSponsor);
event RequestTransferPositionCanceled(address indexed oldSponsor);
event RequestTransferPositionExecuted(address indexed oldSponsor, address indexed newSponsor);
event RequestWithdrawal(address indexed sponsor, uint256 indexed collateralAmount);
event RequestWithdrawal(address indexed user, uint256 indexed collateralAmount, uint256 requestPassTimestamp);
event RequestWithdrawalCanceled(address indexed sponsor, uint256 indexed collateralAmount);
event RequestWithdrawalExecuted(address indexed sponsor, uint256 indexed collateralAmount);
event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);
event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);
event RetryableTicketCreated(uint256 indexed ticketId);
event RevertBatch(uint256 indexed batchIndex, bytes32 indexed batchHash);
event RevokeAccess(bytes32 indexed role, address indexed target, bytes4[] selectors);
event RevokeRole(address revokedAddress, Role revokedRole);
event RevokedOperator(address indexed operator, address indexed tokenHolder);
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
event RoleGranted(bytes32 indexed role, address indexed grantee);
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
event RoleRevoked(bytes32 indexed role, address indexed revokee);
event RollupCreated(bytes32 machineHash);
event RollupInitialized(bytes32 machineHash, uint256 chainId);
event RollupUpdated(address rollup);
event RootDiscarded(bytes32 fraudulentRoot);
event RootReceived(bytes32 packetId, bytes32 root);
event RootReceived(uint32 domain, bytes32 receivedRoot, uint256 queueIndex);
event RootUpdatesPaused();
event RootUpdatesUnpaused();
event RouterAdded(address indexed router, address caller);
event RouterAllowlistRemovalProposed(uint256 timestamp);
event RouterAllowlistRemoved(bool renounced);
event RouterApprovedForPortal(address router, address caller);
event RouterInitialized(address indexed router);
event RouterLiquidityAdded(address indexed router, address local, bytes32 key, uint256 amount, address caller);
event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner);
event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed);
event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient);
event RouterRemoved(address indexed router, address caller);
event RouterUnapprovedForPortal(address router, address caller);
event SafeModuleTransaction(address module, address to, uint256 value, bytes data, Enum.Operation operation);
event SafeReceived(address indexed sender, uint256 value);
event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);
event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);
event Send(address indexed token, address indexed from, bytes32 indexed to, uint amountLD);
event SendEvent(uint64 indexed sequence, uint256 deliveryQuote, uint256 paymentForExtraReceiverValue);
event SendMerkleUpdate(uint256 indexed reserved, bytes32 indexed hash, uint256 indexed position);
event SendRandomnessEvent(uint256 val);
event SendRateLimitUpdated(address updater, uint256 newRateLimit);
event SendRootUpdated(bytes32 indexed blockHash, bytes32 indexed outputRoot);
event SendRootUpdated(bytes32 indexed outputRoot, bytes32 indexed l2BlockHash);
event SenderAdded(address indexed sender);
event SenderRemoved(address indexed sender);
event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit);
event SentMessage(bytes message);
event SentMessageExtension1(address indexed sender, uint256 value);
event SequenceBatches(uint64 indexed numBatch);
event SequenceBatches(uint64 indexed numBatch, bytes32 l1InfoRoot);
event SequenceForceBatches(uint64 indexed numBatch);
event SequencerAdded(address sequencer, address caller);
event SequencerAddressUpdated(address newAddress);
event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data);
event SequencerInboxUpdated(address newSequencerInbox);
event SequencerRemoved(address sequencer, address caller);
event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);
event SetAptosChainId(uint16 aptosChainId);
event SetBatchFee(uint256 newBatchFee);
event SetBridgeBP(uint bridgeFeeBP);
event SetChainAddressSize(uint16 indexed chainId, uint size);
event SetCollateralAndBond(IERC20 indexed collateral, uint256 indexed bondAmount);
event SetDataAvailabilityProtocol(address newDataAvailabilityProtocol);
event SetDefaultAdapterParamsForChainId(uint16 indexed chainId, uint16 indexed proofType, bytes adapterParams);
event SetDefaultConfigForChainId(uint16 indexed chainId, uint16 inboundProofLib, uint64 inboundBlockConfirm, address relayer, uint16 outboundProofType, uint64 outboundBlockConfirm, address oracle);
event SetDefaultERC20Gateway(address indexed oldDefaultERC20Gateway, address indexed newDefaultERC20Gateway);
event SetDefaultNFTFactory(address indexed factory);
event SetDepositQuoteTimeBuffer(uint32 newBuffer);
event SetERC20Gateway(address indexed token, address indexed oldGateway, address indexed newGateway);
event SetETHGateway(address indexed oldETHGateway, address indexed newEthGateway);
event SetEscalationManager(address indexed escalationManager);
event SetForceBatchAddress(address newForceBatchAddress);
event SetForceBatchTimeout(uint64 newforceBatchTimeout);
event SetGlobalPause(bool paused);
event SetHubPool(address indexed newHubPool);
event SetIdentifier(bytes32 indexed identifier);
event SetLayerZeroToken(address indexed tokenAddress);
event SetLiveness(uint64 indexed liveness);
event SetLocalChainId(uint16 localChainId);
event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);
event SetMultiplierBatchFee(uint16 newMultiplierBatchFee);
event SetPendingStateTimeout(uint64 newPendingStateTimeout);
event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);
event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);
event SetPrecrime(address precrime);
event SetRemoteUln(uint16 indexed chainId, bytes32 uln);
event SetRules(string rules);
event SetTokenPause(address token, bool paused);
event SetTreasury(address indexed treasuryAddress);
event SetTrustedAggregator(address newTrustedAggregator);
event SetTrustedAggregatorTimeout(uint64 newTrustedAggregatorTimeout);
event SetTrustedRemote(uint16 _remoteChainId, bytes _path);
event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);
event SetTrustedSequencer(address newTrustedSequencer);
event SetTrustedSequencerURL(string newTrustedSequencerURL);
event SetUseCustomAdapterParams(bool useCustomAdapterParams);
event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes);
event SetVerifyBatchTimeTarget(uint64 newVerifyBatchTimeTarget);
event SetWETH(address weth);
event SetXDomainAdmin(address indexed newAdmin);
event SettingsUpdated(uint time);
event ShadowOperationScheduled(bytes32 indexed _id, uint256 delay);
event ShutdownForNitroSet(bool shutdown);
event SignMsg(bytes32 indexed msgHash);
event SignatureVerifierSet(address signatureVerifier);
event SignersRotated(address[] newAccounts, uint256 newThreshold);
event SlippageUpdated(bytes32 indexed transferId, uint256 slippage);
event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);
event SlowModeActivated(address indexed watcher);
event Snapshot(uint256 id);
event SnapshotRootSaved(uint256 indexed snapshotId, bytes32 indexed root, uint256 indexed count);
event SocketSet(address newSocket);
event StandardL2TokenCreated(address indexed remoteToken, address indexed localToken);
event StartVote(uint256 indexed voteId, address indexed creator, string metadata);
event StateBatchDeleted(uint256 indexed _batchIndex, bytes32 _batchRoot);
event StopRampA(uint256 currentA, uint256 time);
event SubmitPaused(bool new_status);
event SupportedIdentifierAdded(bytes32 indexed identifier);
event SupportedIdentifierRemoved(bytes32 indexed identifier);
event SwapDisabled(bytes32 indexed key, address caller);
event SwapFeesSet(bytes32 indexed key, uint256 newSwapFee, address caller);
event SwapInitialized(bytes32 indexed key, SwapUtils.Swap swap, address caller);
event SwapRemoved(bytes32 indexed key, address caller);
event SwitchSequenceWithDataAvailability();
event SwitchboardFeesSet(uint32 siblingChainSlug, Fees fees);
event Sync(uint112 reserve0, uint112 reserve1);
event TargetCallExecuted(address indexed target, uint256 value, bytes data);
event TargetOptionUpdated(GlobalProposal.TargetOption indexed targetOption, address indexed addr);
event TargetSet(address indexed previousTarget, address indexed newTarget);
event TargetUpdated(address newTarget);
event TemplateUpdated();
event TemplatesUpdated();
event ThresholdSet(uint32 indexed domain, uint8 threshold);
event TicketCreated(bytes32 indexed ticketId);
event TimelockChanged(address timelock_address);
event TokenAdded(address indexed token, string indexed symbol);
event TokenDeployed(string symbol, address tokenAddresses);
event TokenDeployed(uint32 indexed domain, bytes32 indexed id, address indexed representation);
event TokenFrozen(string indexed symbol);
event TokenListerUpdate(address indexed tokenLister, bool isActive);
event TokenMapped(address indexed rootToken, address indexed childToken);
event TokenMapped(address[] mainchainTokens, address[] roninTokens, Token.Standard[] standards);
event TokenMintLimitUpdated(string symbol, uint256 limit);
event TokenMinterBurned(address indexed from, address indexed to, uint256 amount);
event TokenMinterMinted(address indexed from, address indexed to, uint256 amount);
event TokenPausedUpdate(address indexed token, bool paused);
event TokenRemoved(address indexed token, string indexed symbol);
event TokenSent(address indexed sender, string destinationChain, string destinationAddress, string symbol, uint256 amount);
event TokenSet(address indexed l1Address, address indexed l2Address);
event TokenSold(address token, uint amount);
event TokenSwap(address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId);
event TokenUnfrozen(string indexed symbol);
event TokensMinted(address connecter, address receiver, uint256 mintAmount);
event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);
event TotalProtocolDAIUpdated(uint256 newAmount);
event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData);
event Transfer(address indexed _from, address indexed _to, uint256 _amount);
event Transfer(address indexed from, address indexed to, uint value);
event Transfer(address indexed from, address indexed to, uint256 amount);
event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
event Transfer(address indexed from, address indexed to, uint256 value);
event Transfer(address indexed from, address indexed to, uint256 value, bytes data);
event Transfer(address indexed src, address indexed dst, uint256 wad);
event TransferAdminRole(address newPendingAdmin);
event TransferRelayerFeesIncreased(bytes32 indexed transferId, uint256 increase, address asset, address caller);
event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
event TransmissionFeesSet(uint256 dstChainSlug, uint256 transmissionFees);
event TransmitManagerSet(address transmitManager);
event TransparentOperationScheduled(bytes32 indexed _id, uint256 delay, Operation _operation);
event TreasuryUpdate(address newTreasury);
event TrustedForwarderChanged(address indexed _tf);
event TxToL1(address indexed _from, address indexed _to, uint256 indexed _id, bytes _data);
event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data);
event TxToL2(address indexed from, address indexed to, uint256 indexed seqNum, bytes data);
event URI(string value, uint256 indexed id);
event UaForceResumeReceive(uint16 chainId, bytes srcAddress);
event UaReceiveVersionSet(address ua, uint16 version);
event UaSendVersionSet(address ua, uint16 version);
event Unfreeze();
event Unfrozen(address indexed owner);
event UnlockFeePercentagesUpdated(address[] tokens, uint256[] percentages);
event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);
event Unpaused();
event Unpaused(address account);
event UpdateDetails(string indexed name, string indexed symbol);
event UpdateEnforcedTxGateway(address indexed _oldGateway, address indexed _newGateway);
event UpdateFeeVault(address _oldFeeVault, address _newFeeVault);
event UpdateGasOracle(address indexed _oldGasOracle, address indexed _newGasOracle);
event UpdateMaxGasLimit(uint256 _oldMaxGasLimit, uint256 _newMaxGasLimit);
event UpdateMaxNumTxInChunk(uint256 oldMaxNumTxInChunk, uint256 newMaxNumTxInChunk);
event UpdateMaxReplayTimes(uint256 oldMaxReplayTimes, uint256 newMaxReplayTimes);
event UpdateProver(address indexed account, bool status);
event UpdateSequencer(address indexed account, bool status);
event UpdateTokenMapping(address indexed l1Token, address indexed oldL2Token, address indexed newL2Token);
event UpdateTotalLimit(address indexed token, uint256 oldTotalLimit, uint256 newTotalLimit);
event UpdateVerifier(address indexed oldVerifier, address indexed newVerifier);
event UpdateVerifier(uint256 startBatchIndex, address verifier);
event UpdateWhitelist(address _oldWhitelist, address _newWhitelist);
event UpdateZkEVMVersion(uint64 numBatch, uint64 forkID, string version);
event UpdatedActionPriorityStatus(bytes32 actionHash, bool isUnlockedForExecution);
event UpdatedBridge(address bridgeAddress);
event UpdatedInboxAddress(address inbox);
event UpdatedOutbox(address outboxAddress);
event UpdatedReceiveGasLimit(uint256 receiveGasLimit);
event UpdatedRemoteNativeSwitchboard(address remoteNativeSwitchboard);
event UpgradeCancel(uint256 indexed versionId);
event UpgradeComplete(uint256 indexed versionId, address[] newTargets);
event UpgradeExecuted(address indexed upgrade, uint256 value, bytes data);
event Upgraded(address indexed implementation);
event UpgradedSecondary(address indexed implementation);
event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance);
event ValidatorAdded(bytes pubKey, bytes withdrawalCredential);
event ValidatorArrayCleared();
event ValidatorRemoved(bytes pubKey, uint256 remove_idx, bool dont_care_about_ordering);
event ValidatorStatusUpdate(address indexed validatorAddress, bool isActive);
event ValidatorsPopped(uint256 times);
event ValidatorsSwapped(bytes from_pubKey, bytes to_pubKey, uint256 from_idx, uint256 to_idx);
event VoteEmitted(uint256 id, address indexed voter, bool support, uint256 votingPower);
event VotingDelayChanged(uint256 newVotingDelay, address indexed initiatorChange);
event WARNING_UninitedSlot(address who, uint256 slot);
event WatcherAdded(address watcher);
event WatcherManagerChanged(address watcherManager);
event WatcherRemoved(address watcher);
event WhitelistSourceUpdated(address newSource);
event WhitelistStatusChanged(address indexed _account, bool _status);
event WhitelistUpdated(address account, bool isAdded);
event WhitelistUpgraded(address newWhitelist, address[] targets);
event WithdrawETH(address indexed from, address indexed to, uint256 amount, bytes data);
event WithdrawFee(address indexed token, address to, uint amountLD);
event WithdrawNative(address indexed msgSender, address indexed to, uint amount);
event WithdrawRewards(address indexed owner, uint256 amount, address indexed currency);
event WithdrawTVL(address indexed token, address to, uint amountLD);
event WithdrawZRO(address indexed msgSender, address indexed to, uint amount);
event Withdrawal(address indexed owner, uint16 indexed tokenId, uint128 amount);
event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);
event Withdrawal(address indexed src, uint256 wad);
event WithdrawalCredentialSet(bytes _withdrawalCredential);
event WithdrawalFinalized(address indexed to, address indexed l1Token, uint256 amount);
event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success);
event WithdrawalLocked(bytes32 receiptHash, Transfer.Receipt receipt);
event WithdrawalNFT(uint32 indexed tokenId);
event WithdrawalNFTPending(uint32 indexed tokenId);
event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to);
event WithdrawalUnlocked(bytes32 receiptHash, Transfer.Receipt receipt);
event WithdrawalsDisabled(address indexed disabler);
event WithdrawalsEnabled(address indexed enabler);
event Withdrew(bytes32 receiptHash, Transfer.Receipt receipt);
event WithheldETHMoved(address indexed to, uint256 amount);
event WithholdRatioSet(uint256 newRatio);
event WrappedNativeTokenContractUpdated(IWETH weth);
event XAppConnectionManagerSet(address updated, address caller);
event XaiAddressChanged(address indexed newXaiAddress);
event YieldClaimed(address indexed beneficiary, uint256 amount);
event ZkSyncMessageRelayed(bytes32 canonicalTxHash);
event ZroEnabled(bool zroEnabled);
event ZroFee(uint zroFee);
event log                    (string);
event log_address            (address);
event log_array(address[] val);
event log_array(int256[] val);
event log_array(uint256[] val);
event log_bytes              (bytes);
event log_bytes32            (bytes32);
event log_int                (int);
event log_named_address      (string key, address val);
event log_named_array(string key, address[] val);
event log_named_array(string key, int256[] val);
event log_named_array(string key, uint256[] val);
event log_named_bytes        (string key, bytes val);
event log_named_bytes32      (string key, bytes32 val);
event log_named_decimal_int  (string key, int val, uint decimals);
event log_named_decimal_uint (string key, uint val, uint decimals);
event log_named_int          (string key, int val);
event log_named_string       (string key, string val);
event log_named_uint         (string key, uint val);
event log_string             (string);
event log_uint               (uint);
event logs                   (bytes);


error AccessControlOnlyCanRenounceRolesForSelf();
error AddressDoNotHaveRequiredRole();
error AddressEmptyCode(address target);
error AddressInsufficientBalance(address account);
error AllowanceExpired(uint256 deadline);
error AllzkEVMSequencedBatchesMustBeVerified();
error AlreadyAttested();
error AlreadyClaimed();
error AlreadyInit();
error AlreadyInitialized();
error AlreadyPaused();
error AlreadySpent(uint256 index);
error AlreadyUnpaused();
error AlreadyValidDASKeyset(bytes32);
error AlreadyVoted();
error AmountDoesNotMatchMsgValue();
error AmountOutsideLimit();
error AssetLogic__getConfig_notRegistered();
error AssetLogic__getTokenIndexFromStableSwapPool_notExist();
error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported();
error AssetLogic__handleIncomingAsset_nativeAssetNotSupported();
error AssetLogic__handleOutgoingAsset_notNative();
error AssetLogic__swapAsset_externalStableSwapPoolDoesNotExist();
error BadArrayLength(uint256 expected, uint256 actual);
error BadPostUpgradeInit();
error BadSequencerMessageNumber(uint256 stored, uint256 received);
error BadSequencerNumber(uint256 stored, uint256 received);
error BaseConnextFacet__getAdoptedAsset_assetNotFound();
error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted();
error BaseConnextFacet__nonReentrant_reentrantCall();
error BaseConnextFacet__nonXCallReentrant_reentrantCall();
error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin();
error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter();
error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher();
error BaseConnextFacet__onlyOwner_notOwner();
error BaseConnextFacet__onlyProposed_notProposedOwner();
error BaseConnextFacet__whenNotPaused_paused();
error BatchAlreadyVerified();
error BatchFeeOutOfRange();
error BatchNotSequencedOrNotSequenceEnd();
error BeneficiaryInvalid(address newBeneficiary);
error BridgeAmountInvalid();
error BridgeCallFailed();
error BridgeFacet__addRemote_invalidDomain();
error BridgeFacet__addRemote_invalidRouter();
error BridgeFacet__addSequencer_alreadyApproved();
error BridgeFacet__addSequencer_invalidSequencer();
error BridgeFacet__bumpTransfer_noRelayerVault();
error BridgeFacet__bumpTransfer_valueIsZero();
error BridgeFacet__excecute_insufficientGas();
error BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn();
error BridgeFacet__execute_badFastLiquidityStatus();
error BridgeFacet__execute_externalCallFailed();
error BridgeFacet__execute_invalidRouterSignature();
error BridgeFacet__execute_invalidSequencerSignature();
error BridgeFacet__execute_maxRoutersExceeded();
error BridgeFacet__execute_notApprovedForPortals();
error BridgeFacet__execute_notReconciled();
error BridgeFacet__execute_notSupportedRouter();
error BridgeFacet__execute_notSupportedSequencer();
error BridgeFacet__execute_unapprovedSender();
error BridgeFacet__execute_wrongDomain();
error BridgeFacet__forceReceiveLocal_notDestination();
error BridgeFacet__forceUpdateSlippage_invalidSlippage();
error BridgeFacet__forceUpdateSlippage_notDestination();
error BridgeFacet__mustHaveRemote_destinationNotSupported();
error BridgeFacet__onlyDelegate_notDelegate();
error BridgeFacet__removeSequencer_notApproved();
error BridgeFacet__setXAppConnectionManager_domainsDontMatch();
error BridgeFacet__xcall_capReached();
error BridgeFacet__xcall_emptyTo();
error BridgeFacet__xcall_invalidSlippage();
error BridgeFacet__xcall_nativeAssetNotSupported();
error BridgeFacet_xcall__emptyLocalAsset();
error BurnFailed(string symbol);
error CallNotAllowed();
error CallTargetNotAllowed(address target);
error CapExceeded();
error ChainIDAlreadyExist();
error ConnectorUnavailable();
error Connector__processMessage_notUsed();
error DataNotAuthenticated();
error DataTooLarge(uint256 dataLength, uint256 maxDataLength);
error DelayedBackwards();
error DelayedTooFar();
error DeliveryProviderCannotReceivePayment();
error DeliveryProviderDoesNotSupportTargetChain(address relayer, uint16 chainId);
error DestinationNetworkInvalid();
error DiamondInit__init_alreadyInitialized();
error DiamondInit__init_domainsDontMatch();
error DuplicateOperators();
error DuplicateSigner(address account);
error ECDSAInvalidSignature();
error ECDSAInvalidSignatureLength(uint256 length);
error ECDSAInvalidSignatureS(bytes32 s);
error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);
error ERC1155InvalidApprover(address approver);
error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
error ERC1155InvalidOperator(address operator);
error ERC1155InvalidReceiver(address receiver);
error ERC1155InvalidSender(address sender);
error ERC1155MissingApprovalForAll(address operator, address owner);
error ERC1967InvalidAdmin(address admin);
error ERC1967InvalidBeacon(address beacon);
error ERC1967InvalidImplementation(address implementation);
error ERC1967NonPayable();
error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
error ERC20InvalidApprover(address approver);
error ERC20InvalidReceiver(address receiver);
error ERC20InvalidSender(address sender);
error ERC20InvalidSpender(address spender);
error ERC2612ExpiredSignature(uint256 deadline);
error ERC2612InvalidSigner(address signer, address owner);
error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);
error ERC721InsufficientApproval(address operator, uint256 tokenId);
error ERC721InvalidApprover(address approver);
error ERC721InvalidOperator(address operator);
error ERC721InvalidOwner(address owner);
error ERC721InvalidReceiver(address receiver);
error ERC721InvalidSender(address sender);
error ERC721NonexistentToken(uint256 tokenId);
error EmptyBytecode();
error ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);
error ErrAlreadyVoted(address voter);
error ErrBridgeOperatorAlreadyExisted(address bridgeOperator);
error ErrBridgeOperatorUpdateFailed(address bridgeOperator);
error ErrCallPrecompiled(bytes4 msgSig);
error ErrCallerMustBeCoinbase();
error ErrContractTypeNotFound(ContractType contractType);
error ErrCurrentProposalIsNotCompleted();
error ErrDuplicated(bytes4 msgSig);
error ErrERC20MintingFailed();
error ErrERC721MintingFailed();
error ErrEmptyArray();
error ErrInSourceValidation();
error ErrInsufficientGas(bytes32 proposalHash);
error ErrInvalidArguments(bytes4 msgSig);
error ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);
error ErrInvalidExpiryTimestamp();
error ErrInvalidInfo();
error ErrInvalidOrder(bytes4 msgSig);
error ErrInvalidPercentage();
error ErrInvalidProposalNonce(bytes4 msgSig);
error ErrInvalidReceipt();
error ErrInvalidReceiptKind();
error ErrInvalidRequest();
error ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);
error ErrInvalidSignatures(bytes4 msgSig);
error ErrInvalidThreshold(bytes4 msgSig);
error ErrInvalidTokenStandard();
error ErrInvalidVoteHash();
error ErrInvalidVoteWeight(bytes4 msgSig);
error ErrLengthMismatch(bytes4 msgSig);
error ErrNativeTransferFailed(bytes4 msgSig);
error ErrNonpayableAddress(address);
error ErrOncePerBlock();
error ErrOnlySelfCall(bytes4 msgSig);
error ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);
error ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);
error ErrQueryForApprovedWithdrawal();
error ErrQueryForEmptyVote();
error ErrQueryForExpiredVote();
error ErrQueryForInsufficientVoteWeight();
error ErrQueryForNonExistentVote();
error ErrQueryForOutdatedBridgeOperatorSet();
error ErrQueryForProcessedWithdrawal();
error ErrReachedDailyWithdrawalLimit();
error ErrRelayFailed(bytes4 msgSig);
error ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);
error ErrTokenCouldNotTransfer(Info tokenInfo, address to, address token);
error ErrTokenCouldNotTransferFrom(Info tokenInfo, address from, address to, address token);
error ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);
error ErrUnauthorizedCall(bytes4 msgSig);
error ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);
error ErrUnsupportedInterface(bytes4 interfaceId, address addr);
error ErrUnsupportedStandard();
error ErrUnsupportedTarget(bytes32 proposalHash, uint256 targetNumber);
error ErrUnsupportedToken();
error ErrUnsupportedVoteType(bytes4 msgSig);
error ErrVoteIsFinalized();
error ErrZeroAddress(bytes4 msgSig);
error ErrZeroCodeContract(address addr);
error ErrorAccountIsZeroAddress();
error ErrorAlreadyInitialized();
error ErrorDepositsDisabled();
error ErrorDepositsEnabled();
error ErrorETHValueTooLow();
error ErrorNoMaxSubmissionCost();
error ErrorNotAdmin();
error ErrorProxyIsOssified();
error ErrorSenderNotEOA();
error ErrorUnauthorizedBridge();
error ErrorUnauthorizedMessenger();
error ErrorUnsupportedL1Token();
error ErrorUnsupportedL2Token();
error ErrorWithdrawalsDisabled();
error ErrorWithdrawalsEnabled();
error ErrorWrongCrossDomainSender();
error EtherTransferFailed();
error ExceedMaxVerifyBatches();
error ExceedMintLimit(string symbol);
error ExceedTotalLimit(address token);
error ExcessiveInvalidation();
error ExecutionFailed();
error ExtraDataNotEmpty();
error FailedDeploy();
error FailedInit();
error FailedInnerCall();
error FailedTokenWrappedDeployment();
error FeePaymentFailed(address recipient);
error FeeTooLow();
error FeesNotEnough();
error FeesTooHigh();
error FinalNumBatchBelowLastVerifiedBatch();
error FinalNumBatchDoesNotMatchPendingState();
error FinalPendingStateNumInvalid();
error ForceBatchNotAllowed();
error ForceBatchTimeoutNotExpired();
error ForceBatchesAlreadyActive();
error ForceBatchesDecentralized();
error ForceBatchesNotAllowedOnEmergencyState();
error ForceBatchesOverflow();
error ForceIncludeBlockTooSoon();
error ForceIncludeTimeTooSoon();
error ForcedDataDoesNotMatch();
error ForwardNotSufficientlyFunded(uint256 amountOfFunds, uint256 amountOfFundsNeeded);
error ForwardRequestFromWrongAddress(address msgSender, address deliveryTarget);
error GasLimitTooLarge();
error GasTokenNetworkMustBeZeroOnEther();
error GlobalExitRootInvalid();
error GlobalExitRootNotExist();
error HadZeroInit();
error HaltTimeoutNotExpired();
error HaltTimeoutNotExpiredAfterEmergencyState();
error HugeTokenMetadataNotSupported();
error InboxFacet__handle_notTransfer();
error InboxFacet__onlyRemoteRouter_notRemote();
error InboxFacet__onlyReplica_notReplica();
error InboxFacet__reconcile_alreadyReconciled();
error InboxFacet__reconcile_noPortalRouter();
error IncorrectMessagePreimage();
error InflationRecipientNotWhitelisted(address);
error InitBatchMustMatchCurrentForkID();
error InitNumBatchAboveLastVerifiedBatch();
error InitNumBatchDoesNotMatchPendingState();
error InsufficientAllowance(uint256 amount);
error InsufficientBalance();
error InsufficientFees();
error InsufficientMessageLength();
error InsufficientMsgValue();
error InsufficientRelayerFunds(uint256 msgValue, uint256 minimum);
error InsufficientSubmissionCost(uint256 expected, uint256 actual);
error InsufficientValue(uint256 expected, uint256 actual);
error InvalidAccount();
error InvalidAccountNonce(address account, uint256 currentNonce);
error InvalidAddress();
error InvalidAmount();
error InvalidAmount(uint256 maxAmount);
error InvalidAuthModule();
error InvalidBatchSize();
error InvalidBlockNumber(uint256 requested, uint256 current);
error InvalidCapacitorAddress();
error InvalidCapacitorType();
error InvalidChainId();
error InvalidCodeHash();
error InvalidCommand();
error InvalidCommands();
error InvalidConnection();
error InvalidContract(address target);
error InvalidContractSignature();
error InvalidCrossChainSender(address actual, address expected);
error InvalidDeliveryVaa(string reason);
error InvalidEmitter(bytes32 emitter, bytes32 registered, uint16 chainId);
error InvalidGovernance();
error InvalidImplementation();
error InvalidInitializeTransaction();
error InvalidMintLimiter();
error InvalidMsgValue();
error InvalidMsgValue(uint256 msgValue, uint256 totalFee);
error InvalidNonce();
error InvalidOperators();
error InvalidOutboxSet(address outbox);
error InvalidOverrideGasLimit();
error InvalidOverrideReceiverValue();
error InvalidOverrideRefundPerGasUnused();
error InvalidOwner();
error InvalidOwnerAddress();
error InvalidPacketId();
error InvalidPacketLength();
error InvalidPayloadId(uint8 parsed, uint8 expected);
error InvalidPayloadLength(uint256 received, uint256 expected);
error InvalidPoolId();
error InvalidProof();
error InvalidRangeBatchTimeTarget();
error InvalidRangeForceBatchTimeout();
error InvalidRangeMultiplierBatchFee();
error InvalidRole();
error InvalidRoot();
error InvalidS();
error InvalidSender();
error InvalidSetMintLimitsParams();
error InvalidShortString();
error InvalidSigLength();
error InvalidSignature();
error InvalidSignatureLength();
error InvalidSigner();
error InvalidSignerThreshold();
error InvalidSigners();
error InvalidSmtProof();
error InvalidTarget();
error InvalidThreshold();
error InvalidTimeLockHash();
error InvalidTokenAddress();
error InvalidTokenDeployer();
error InvalidTokenSet(address token);
error InvalidTransmitter();
error InvalidV();
error InvalidVaaKeyType(uint8 parsed);
error InvalidWeights();
error IsLocked();
error L1Forked();
error LengthMismatch();
error LowGasLimit();
error LowSignaturesWeight();
error MainnetSpokeConnector_finalize__DeprecatedInHubDomain();
error MainnetSpokeConnector_proposeAggregateRoot__DeprecatedInHubDomain();
error MainnetSpokeConnector_saveAggregateRoot__CallerIsNotRootManager();
error MainnetSpokeConnector_saveAggregateRoot__EmptyRoot();
error MainnetSpokeConnector_saveAggregateRoot__OnlyOptimisticMode();
error MainnetSpokeConnector_saveAggregateRoot__RootAlreadyProven();
error MalformedSigners();
error MathOverflowedMulDiv();
error MerkleLib__insert_treeIsFull();
error MerkleProofTooLong(uint256 actualLength, uint256 maxProofLength);
error MerkleTreeFull();
error MerkleTreeManager__renounceOwnership_prohibited();
error MerkleTreeManager__setArborist_alreadyArborist();
error MerkleTreeManager__setArborist_zeroAddress();
error MessageAlreadyExecuted();
error MessageFailed();
error MessageInvalid();
error MessageSendingFailed(address destination);
error MintFailed(string symbol);
error MonthlyRateGreaterThanYearlyRate(uint256, uint256);
error MsgValueNotZero();
error MsgValueTooHigh();
error MsgValueTooLow();
error MustSequenceSomeBatch();
error NativeTokenIsEther();
error NativeTransferFailed();
error NewAccInputHashDoesNotExist();
error NewPendingStateTimeoutMustBeLower();
error NewStateRootNotInsidePrime();
error NewTrustedAggregatorTimeoutMustBeLower();
error NoDeliveryInProgress();
error NoPendingPacket();
error NoPermit(bytes32 role);
error NoRootFound();
error NoSocketFee();
error NoSuchKeyset(bytes32);
error NoTicketWithID();
error NoValueInMessagesOnGasTokenNetworks();
error NotAllowedOrigin(address origin);
error NotAnEvmAddress(bytes32);
error NotApprovedByGateway();
error NotBatchPoster();
error NotCallable();
error NotContract();
error NotContract(address addr);
error NotCrossChainCall();
error NotDelayedInbox(address sender);
error NotEnoughMaticAmount();
error NotEnoughPOLAmount();
error NotExecutor();
error NotExecutorOrOwner(address actual);
error NotForked();
error NotGovernance();
error NotHub();
error NotIERC165Compliant(address guard_);
error NotInflationOwner(address);
error NotMintLimiter();
error NotOrigin();
error NotOutbox(address sender);
error NotOwner();
error NotOwner(address sender, address owner);
error NotProxy();
error NotRollup(address sender, address rollup);
error NotRollupOrOwner(address sender, address rollup, address owner);
error NotSelf();
error NotSequencerInbox(address sender);
error NotSigner();
error NotSocket();
error NotValidAmount();
error NotValidOwner();
error NotValidSignature();
error NotValidSpender();
error OldAccInputHashDoesNotExist();
error OldStateRootDoesNotExist();
error OnlyAdmin();
error OnlyAllowedContracts();
error OnlyEmergencyState();
error OnlyExecutionManager();
error OnlyNominee();
error OnlyNotEmergencyState();
error OnlyOwner();
error OnlyOwnerDestination(address expected, address actual, address destination);
error OnlyPendingAdmin();
error OnlyPolygonZkEVM();
error OnlyRollupManager();
error OnlySocket();
error OnlyTrustedAggregator();
error OnlyTrustedSequencer();
error OperatorNotAllowed(address operator);
error OwnableInvalidOwner(address owner);
error OwnableUnauthorizedAccount(address account);
error PacketLengthNotAllowed();
error PacketNotProposed();
error PathNotMinimal(uint256 index, uint256 maxIndex);
error Paused();
error PayloadTooLarge();
error PendingStateDoesNotExist();
error PendingStateInvalid();
error PendingStateNotConsolidable();
error PendingStateTimeoutExceedHaltAggregationTimeout();
error PeriodIsZero();
error PermitExpired();
error PlugDisconnected();
error PortalFacet__repayAavePortalFor_invalidAsset();
error PortalFacet__repayAavePortalFor_zeroAmount();
error PortalFacet__repayAavePortal_assetNotApproved();
error PortalFacet__repayAavePortal_insufficientFunds();
error PortalFacet__setAavePortalFee_invalidFee();
error ProofTooLong(uint256 proofLength);
error ProposedOwnableFacet__acceptProposedOwner_noOwnershipChange();
error ProposedOwnableFacet__assignRoleAdmin_invalidInput();
error ProposedOwnableFacet__assignRoleRouter_invalidInput();
error ProposedOwnableFacet__assignRoleWatcher_invalidInput();
error ProposedOwnableFacet__delayElapsed_delayNotElapsed();
error ProposedOwnableFacet__proposeAssetAllowlistRemoval_noOwnershipChange();
error ProposedOwnableFacet__proposeNewOwner_invalidProposal();
error ProposedOwnableFacet__proposeNewOwner_noOwnershipChange();
error ProposedOwnableFacet__proposeRouterAllowlistRemoval_noOwnershipChange();
error ProposedOwnableFacet__removeAssetAllowlist_noOwnershipChange();
error ProposedOwnableFacet__removeAssetAllowlist_noProposal();
error ProposedOwnableFacet__removeRouterAllowlist_noOwnershipChange();
error ProposedOwnableFacet__removeRouterAllowlist_noProposal();
error ProposedOwnableFacet__revokeRole_invalidInput();
error ProposedOwnable__onlyOwner_notOwner();
error ProposedOwnable__onlyProposed_notProposedOwner();
error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();
error ProposedOwnable__proposeNewOwner_invalidProposal();
error ProposedOwnable__proposeNewOwner_noOwnershipChange();
error ProposedOwnable__renounceOwnership_invalidProposal();
error ProposedOwnable__renounceOwnership_noProposal();
error ProxyDeniedAdminAccess();
error RateLimited__rateLimited_messageSendRateExceeded();
error RateOverLimit(uint256 newRate, uint256 currentRate);
error ReentrantDelivery(address msgSender, address lockedBy);
error RelayerFacet__addRelayer_alreadyApproved();
error RelayerFacet__removeRelayer_notApproved();
error RelayerFacet__setRelayerFeeVault_invalidRelayerFeeVault();
error RequestedGasLimitTooLow();
error RequesterNotWormholeRelayer();
error RollupAddressAlreadyExist();
error RollupMustExist();
error RollupNotChanged();
error RollupTypeDoesNotExist();
error RollupTypeObsolete();
error RootManager__renounceOwnership_prohibited();
error RootManager_activateOptimisticMode__OptimisticModeOn();
error RootManager_aggregate__OptimisticModeOn();
error RootManager_checkDomains__InvalidDomains();
error RootManager_constructor__DisputeBlocksLowerThanMin();
error RootManager_finalize__InvalidAggregateRoot();
error RootManager_finalize__InvalidInputHash();
error RootManager_finalize__ProposeInProgress();
error RootManager_onlyOptimisticMode__SlowModeOn();
error RootManager_onlyProposer__NotWhitelistedProposer(address caller);
error RootManager_propagate__AggregateRootIsZero();
error RootManager_proposeAggregateRoot__InvalidSnapshotId(uint256 snapshotId);
error RootManager_proposeAggregateRoot__ProposeInProgress();
error RootManager_sendRootToHub__NoMessageSent();
error RootManager_setDisputeBlocks__DisputeBlocksLowerThanMin();
error RootManager_setDisputeBlocks__SameDisputeBlocksAsBefore();
error RootManager_setHubDomain__InvalidDomain();
error RootManager_setMinDisputeBlocks__SameMinDisputeBlocksAsBefore();
error RoutersFacet__acceptProposedRouterOwner_badCaller();
error RoutersFacet__acceptProposedRouterOwner_notElapsed();
error RoutersFacet__addLiquidityForRouter_amountIsZero();
error RoutersFacet__addLiquidityForRouter_badRouter();
error RoutersFacet__addLiquidityForRouter_capReached();
error RoutersFacet__addLiquidityForRouter_routerEmpty();
error RoutersFacet__approveRouterForPortal_alreadyApproved();
error RoutersFacet__approveRouterForPortal_notAdded();
error RoutersFacet__approveRouter_alreadyAdded();
error RoutersFacet__approveRouter_routerEmpty();
error RoutersFacet__initializeRouter_configNotEmpty();
error RoutersFacet__onlyRouterOwner_notRouterOwner();
error RoutersFacet__proposeRouterOwner_badRouter();
error RoutersFacet__proposeRouterOwner_notNewOwner();
error RoutersFacet__removeRouterLiquidityFor_notOwner();
error RoutersFacet__removeRouterLiquidity_amountIsZero();
error RoutersFacet__removeRouterLiquidity_insufficientFunds();
error RoutersFacet__removeRouterLiquidity_recipientEmpty();
error RoutersFacet__setLiquidityFeeNumerator_tooLarge();
error RoutersFacet__setLiquidityFeeNumerator_tooSmall();
error RoutersFacet__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer();
error RoutersFacet__setRouterOwner_noChange();
error RoutersFacet__setRouterRecipient_notNewRecipient();
error RoutersFacet__unapproveRouterForPortal_notApproved();
error RoutersFacet__unapproveRouter_notAdded();
error RoutersFacet__unapproveRouter_routerEmpty();
error SenderMustBeRollup();
error SequenceWithDataAvailabilityNotAllowed();
error SequenceZeroBatches();
error SequencedTimestampBelowForcedTimestamp();
error SequencedTimestampInvalid();
error SetupFailed();
error SignatureExpired(uint256 signatureDeadline);
error SimulationOnlyEntrypoint();
error SpokeConnector_activateOptimisticMode__OptimisticModeOn();
error SpokeConnector_constructor__DisputeBlocksLowerThanMin();
error SpokeConnector_finalize__InvalidInputHash();
error SpokeConnector_finalize__ProposeInProgress();
error SpokeConnector_finalize__ProposedHashIsFinalizedHash();
error SpokeConnector_onlyOptimisticMode__SlowModeOn();
error SpokeConnector_onlyProposer__NotAllowlistedProposer();
error SpokeConnector_proposeAggregateRoot__ProposeInProgress();
error SpokeConnector_receiveAggregateRoot__OptimisticModeOn();
error SpokeConnector_setDisputeBlocks__DisputeBlocksLowerThanMin();
error SpokeConnector_setDisputeBlocks__SameDisputeBlocksAsBefore();
error SpokeConnector_setMinDisputeBlocks__SameMinDisputeBlocksAsBefore();
error StableSwapFacet__deadlineCheck_deadlineNotMet();
error StableSwapFacet__getSwapTokenBalance_indexOutOfRange();
error StableSwapFacet__getSwapTokenIndex_notExist();
error StableSwapFacet__getSwapToken_outOfRange();
error StoredRootMustBeDifferentThanNewRoot();
error StringTooLong(string str);
error StringsInsufficientHexLength(uint256 value, uint256 length);
error SupplyExceedsMaxMonthlyCap(uint256 newSupply, uint256 maxMonthlySupply);
error SupplyExceedsMaxYearlyCap(uint256 newSupply, uint256 maxYearlySupply);
error SwapAdminFacet__disableSwap_alreadyDisabled();
error SwapAdminFacet__disableSwap_notInitialized();
error SwapAdminFacet__initializeSwap_aExceedMax();
error SwapAdminFacet__initializeSwap_adminFeeExceedMax();
error SwapAdminFacet__initializeSwap_alreadyInitialized();
error SwapAdminFacet__initializeSwap_decimalsMismatch();
error SwapAdminFacet__initializeSwap_duplicateTokens();
error SwapAdminFacet__initializeSwap_failedInitLpTokenClone();
error SwapAdminFacet__initializeSwap_feeExceedMax();
error SwapAdminFacet__initializeSwap_invalidPooledTokens();
error SwapAdminFacet__initializeSwap_tokenDecimalsExceedMax();
error SwapAdminFacet__initializeSwap_zeroTokenAddress();
error SwapAdminFacet__removeSwap_delayNotElapsed();
error SwapAdminFacet__removeSwap_notDisabledPool();
error SwapAdminFacet__removeSwap_notInitialized();
error SwapAdminFacet__updateLpTokenTarget_invalidNewAddress();
error SwitchToSameValue();
error SwitchboardExists();
error TargetChainIsNotThisChain(uint16 targetChain);
error TimeLockAlreadyScheduled();
error TimeLockNotReady();
error TokenAlreadyExists(string symbol);
error TokenContractDoesNotExist(address token);
error TokenDeployFailed(string symbol);
error TokenDoesNotExist(string symbol);
error TokenFacet__addAssetId_alreadyAdded();
error TokenFacet__addAssetId_badBurn();
error TokenFacet__addAssetId_badMint();
error TokenFacet__enrollAdoptedAndLocalAssets_emptyCanonical();
error TokenFacet__removeAssetId_invalidParams();
error TokenFacet__removeAssetId_notAdded();
error TokenFacet__removeAssetId_remainsCustodied();
error TokenFacet__setLiquidityCap_notCanonicalDomain();
error TokenFacet__setupAssetWithDeployedRepresentation_invalidRepresentation();
error TokenFacet__setupAssetWithDeployedRepresentation_onCanonicalDomain();
error TokenFacet__setupAsset_invalidCanonicalConfiguration();
error TokenFacet__setupAsset_representationListed();
error TokenFacet__updateDetails_localNotFound();
error TokenFacet__updateDetails_notApproved();
error TokenFacet__updateDetails_onlyRemote();
error TokenNotSupported();
error TokenTransferFailed();
error TotalLimitIsZero(address token);
error TransactionsLengthAboveMax();
error TrustedAggregatorTimeoutExceedHaltAggregationTimeout();
error TrustedAggregatorTimeoutNotExpired();
error TypedMemView__assertType_typeAssertionFailed(uint256 actual, uint256 expected);
error TypedMemView__assertValid_validityAssertionFailed();
error TypedMemView__index_indexMoreThan32Bytes();
error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice);
error TypedMemView__unsafeCopyTo_identityOOG();
error TypedMemView__unsafeCopyTo_invalidPointer();
error TypedMemView__unsafeCopyTo_nullPointer();
error UnequalArrayLengths();
error UnknownRoot(bytes32 root);
error UpdateNotCompatible();
error UpdateToSameRollupTypeID();
error VaaKeysDoNotMatchVaas(uint8 index);
error VaaKeysLengthDoesNotMatchVaasLength(uint256 keys, uint256 vaas);
error ValueSentTooLow();
error ValueShouldBeGreaterThanFee();
error VerificationFailed();
error WatcherFound();
error WatcherNotFound();
error WhitelistingDisabled();
error WithdrawEthFail(address destination);
error ZeroAddress();
error ZeroAmount();

type MemoryPointer is uint256;
type ShortString is bytes32;
type TUint256Slot is bytes32;
type Fixed18 is int256;
type Price is uint128;
type Quantity is uint128;
type UFixed is uint256;
type Id is uint8;
